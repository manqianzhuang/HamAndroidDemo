package com.superman.animate.aidlimport android.content.ComponentNameimport android.content.Contextimport android.content.Intentimport android.content.ServiceConnectionimport android.os.Bundleimport android.os.IBinderimport android.view.Viewimport androidx.appcompat.app.AppCompatActivityimport com.blankj.utilcode.util.LogUtilsimport com.superman.animate.Rimport com.superman.animate.TestClickAdapterimport com.superman.maidl.BookBeanimport com.superman.maidl.BookServiceimport com.superman.maidl.IBookRemoteimport kotlinx.android.synthetic.main.activity_aidl.*import kotlinx.coroutines.runBlockingimport kotlin.random.Randomclass AIDLActivity : AppCompatActivity() {    private lateinit var remote: IBookRemote    private var books = ArrayList<String>()    private lateinit var adapter: TestClickAdapter    private val connection = object : ServiceConnection {        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {            LogUtils.w("$name is connected, the service is $service")            remote = IBookRemote.Stub.asInterface(service!!)!!        }        override fun onServiceDisconnected(name: ComponentName?) {            LogUtils.e("the $name service had disconnected")        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_aidl)        adapter = TestClickAdapter(R.layout.item_book, books)        rv_book.adapter = adapter        initAidlService()   }    fun addBook(view: View) {        val book = BookBean("android进阶之光", "刘望舒", "2020-10-20")        remote.addBook(book)        adapter.addData("添加了 --- ${book.name}   ${book.author}   ${book.publishTime}")    }    fun remove(view: View) {        val size = remote.queryBooks().size        val i = Random.nextInt(size+1)        remote.removeBook(i)        adapter.addData("删除了 --- ${books[i]}")    }    fun queryBook(view: View) {        runBlocking {            val list = remote.queryBooks()            books.addAll(list.map { "${it.name}    ${it.author}   ${it.publishTime}" })            LogUtils.w("books.size = ${books.size}")            adapter.notifyDataSetChanged()        }    }    private fun initAidlService() {        val intent = Intent(this, BookService::class.java).apply {            action = "com.superman.maidl.ACTION_BOOK_MANAGER"            setPackage("com.superman.maidl")        }        bindService(intent, connection, Context.BIND_AUTO_CREATE)    }    override fun onDestroy() {        super.onDestroy()        unbindService(connection)    }}