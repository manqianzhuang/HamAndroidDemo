package com.superman.maidlimport android.os.*/** * 写一个接口继承于IInterface, */interface IBookRemote : IInterface {    fun addBook(book: BookBean?)    fun removeBook(index: Int)    fun queryBooks(): List<BookBean>    /**     * Stub     * 1. 继承于Binder, 拥有顶层Binder的能力     * 2. 实现了IBookRemote接口，通过Binder进行对book进行增删查改     */    abstract class Stub : Binder(), IBookRemote {        init {            this.attachInterface(this, DESCRIPTOR)        }        companion object {            //常量            private const val DESCRIPTOR = "com.superman.maidl.IBookRemote"            const val TRANSACTION_ADD = IBinder.FIRST_CALL_TRANSACTION            const val TRANSACTION_REMOVE = IBinder.FIRST_CALL_TRANSACTION + 1            const val TRANSACTION_QUERY_ALL = IBinder.FIRST_CALL_TRANSACTION + 2            fun asInterface(iBinder: IBinder?): IBookRemote? {                if (iBinder==null)                    return null                //判断是否远程服务                val iin = iBinder.queryLocalInterface(DESCRIPTOR)                if (iin is IBookRemote) {                    return iin                }                return Proxy(iBinder)            }        }        /**         * 服务端处理数据         */        override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean {            return when(code) {                INTERFACE_TRANSACTION -> {                    reply?.writeString(DESCRIPTOR)                    true                }                TRANSACTION_ADD -> {                    //传输包名到Native层进行校验                    data.enforceInterface(DESCRIPTOR)                    //如果校验通过，准许传输数据(通过Book的CREATOR接口传输)                    val book = if (data.readInt() != 0) BookBean.createFromParcel(data) else null                    addBook(book)                    reply?.writeNoException()                    if (book != null) {                        //执行写入操作(把book写到Parcel对象，然后传入Native层)                        reply?.writeInt(1)                        book.writeToParcel(reply!!, Parcelable.PARCELABLE_WRITE_RETURN_VALUE)                    } else                        reply?.writeInt(0)                    true                }                TRANSACTION_REMOVE -> {                    data.enforceInterface(DESCRIPTOR)                    val index = data.readInt()                    removeBook(index)                    reply?.writeNoException()                    true                }                TRANSACTION_QUERY_ALL -> {                    data.enforceInterface(DESCRIPTOR)                    val books = this.queryBooks()                    reply?.writeNoException()                    reply?.writeTypedList(books)                    true                }                else -> super.onTransact(code, data, reply, flags)            }        }        override fun asBinder(): IBinder = this        private class Proxy(private val ibinder: IBinder?): IBookRemote {            override fun addBook(book: BookBean?) {                //从客户端传递的数据                val _data = Parcel.obtain()                //从服务端回传的数据                val _reply = Parcel.obtain()                try {                    _data.writeInterfaceToken(DESCRIPTOR)                    if (book != null) {                        _data.writeInt(1)                        book.writeToParcel(_data, 0)                    } else {                        _data.writeInt(0)                    }                    ibinder?.transact(TRANSACTION_ADD, _data, _reply, 0)                    _reply.readException()                    if (_reply.readInt() != 0) {                        BookBean(_reply)                    }                } finally {                    _data.recycle()                    _reply.recycle()                }            }            override fun removeBook(index: Int) {                val _data = Parcel.obtain()                val _reply = Parcel.obtain()                try {                    _data.writeInterfaceToken(DESCRIPTOR)                    _data.writeInt(index)                    ibinder?.transact(TRANSACTION_REMOVE, _data, _reply,                        0)                    _reply.readException()                } finally {                    _data.recycle()                    _reply.recycle()                }            }            override fun queryBooks(): List<BookBean> {                val _data = Parcel.obtain()                val _reply = Parcel.obtain()                val result: List<BookBean>                try {                    _data.writeInterfaceToken(DESCRIPTOR)                    ibinder?.transact(TRANSACTION_QUERY_ALL, _data, _reply, 0)                    _reply.readException()                    result = _reply.createTypedArrayList(BookBean.CREATOR)!!                } finally {                    _data.recycle()                    _reply.recycle()                }                return result            }            override fun asBinder(): IBinder = ibinder!!        }    }}